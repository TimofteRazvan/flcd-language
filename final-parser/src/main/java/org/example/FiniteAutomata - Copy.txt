import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class FiniteAutomata {
    private List<String> statesList;
    private List<String> symbolsList;
    private String initialState;
    private List<String> endStates;
    private List<Triple<String, String, String>> listOfTransitions;

    public FiniteAutomata() {
        statesList = new ArrayList<>();
        symbolsList = new ArrayList<>();
        initialState = "";
        endStates = new ArrayList<>();
        listOfTransitions = new ArrayList<>();
    }

    public void read() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("src/FA.in"));
        String data = null;
        data = br.readLine();
        String[] tmp = data.split(",");
        for (String state: tmp) {
            statesList.add(state);
        }
        data = br.readLine();
        tmp = data.split(",");
        for (String symbol: tmp) {
            symbolsList.add(symbol);
        }
        initialState = br.readLine();
        data = br.readLine();
        tmp = data.split(",");
        for(String state: tmp) {
            endStates.add(state);
        }
        while ((data = br.readLine()) != null) {
            tmp = data.split(",|=");
            listOfTransitions.add(new Triple<String, String, String>(tmp[0], tmp[1], tmp[2]));
        }

        br.close();
    }

    public boolean isValidSequence(String inputSequence) {
        String currentState = initialState;
    
        for (char symbol : inputSequence.toCharArray()) {
            String symbolStr = String.valueOf(symbol);
            boolean transitionFound = false;
    
            for (Triple<String, String, String> transition : listOfTransitions) {
                if (transition.getLeft().equals(currentState) && transition.getMiddle().equals(symbolStr)) {
                    currentState = transition.getRight();
                    transitionFound = true;
                    break;
                }
            }
    
            if (!transitionFound) {
                return false;
            }
        }

        return endStates.contains(currentState);
    }
    

    public void display() {
        System.out.print("States list: ");
        for (String s: statesList) {
            System.out.print(s + " ");
        }
        System.out.print("\nSymbol list: ");
        for (String s: symbolsList) {
            System.out.print(s + " ");
        }
        System.out.print("\nInitial state: " + initialState);
        System.out.print("\nEnd states list: ");
        for (String s: endStates) {
            System.out.print(s + " ");
        }
        System.out.println("\nList of transactions: ");
        for (Triple<String, String, String> t: listOfTransitions) {
            System.out.println(t.getLeft() + "," + t.getMiddle() + "=" + t.getRight());
        }
    }
}